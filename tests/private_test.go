package tests

import (
	"fmt"
	"github.com/ProtonMail/gopenpgp/v2/crypto"
	"github.com/ProtonMail/gopenpgp/v2/helper"
	"testing"
)

func TestPrivateKeyParse(t *testing.T) {
	const privateKey = `
-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=68hz
-----END PGP PRIVATE KEY BLOCK-----
`

	const pgpMessage = `
-----BEGIN PGP MESSAGE-----

hQGMA9d48UWbLTmdAQwAkzDrO7f8OSWOiG4iqwOAQu9rTCIjRegxbVI/4dbXeSf7
lM3KpEjutHE4BzUxlYHmX3uh/I07OFySZnuI0x1lxFldXwyDEqQ1KTdADyVaGKXJ
SZIytnlH+ws7cyoVhC2fDIx8nq0TNHkhPUKZLKqBCecZ6uq5lGt84wyc+v5Xn7jF
cwycb5wlgEZjmFHXwh2Oo8AlpPoXa44UCDB8MrQB3KiHsmyLmOe4Afx23ZE4HDnj
bKD3cBaUZuSNEw71hj9uSWfESAHJW+ntO1LiQ/TXy8w6I28v1ahyH90eXSiKoodQ
l4XvwHmn7B6kpnBpmomMMb3D3oYovfOVHz9FqUxqcAC27n+65y/RXOwpsO51oeHp
hCNrpW/pVjnETykin90jsOYdHiIoVWQJBuiGabICYAnn6DeIUjlTnahj0drNxbgf
f2+cNabhEsFCA8BCTzesPuPLvK4hlMchi3xZwVfKudLyIPBcvaGBWPMZvuWBhX+s
9UjGxgxMFh1a/nu/hzqQ0koB4b2aHpeyUKYEx2gJFr2NcvRtZLh7QvRRDVx//4mu
84PZN72rkZArWV9nMABfPeIVjB9eadctvvvaXjXd8yPJPTStvHYkN0d/eg==
=jfjU
-----END PGP MESSAGE-----

`

	key, err := crypto.NewKeyFromArmored(privateKey)
	if err != nil {
		t.Fatal(err)
	}

	fmt.Println(key.GetEntity().PrimaryIdentity().Name)

	keyString, err := key.Armor()
	if err != nil {
		t.Fatal(err)
	}

	secret, err := helper.DecryptMessageArmored(keyString, []byte("123456789123456789"), pgpMessage)
	if err != nil {
		t.Fatal(err)
	}

	fmt.Println(secret)
}

func TestEncryptTest(t *testing.T) {
	const privateKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----
Version: GopenPGP 2.5.2
Comment: https://gopenpgp.org

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
Ob8=
=gyGk
-----END PGP PRIVATE KEY BLOCK-----`

	const publicKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GopenPGP 2.5.2
Comment: https://gopenpgp.org

xsFNBGPgYJgBEADHOTiM8Tmi6DxkvahobLlPwzBcFcVdV3DEsgnxIrO3yGZ8elKE
lP4L8so8+arc45JbW11z2qdmv4cP0ENzJykPK8doZKhwbZ7fwxQLF/uCdKhcjkqv
/n6mpMsB0nCtOCWQHc34aFpE60w9Y+MUHOGrTj+sfrBBdaE7VAIKl/Dwt7PyS0X5
6vaQ8nROSbUt0SnH+Yu8oJypvCwTOyrC5BnTJtwvQP63N0RV0P3RvuAs00uxeD6s
8CtuNwXRUM6OB5Q6JM16iN0m+H7981lU1tA4YVRb3oTqoekvFEgjnEnCsHG6x9gu
ZDpoD4i1pRSjojmvUm3FNQdExiDWEWCxypUunNuZgwj0FCvGf8dnRxsz2vg+F/wQ
Ri5Y/H+ognWrpvwmfqsVDg1isQVYJfgkuUYjzARvpWWB4WHj5u8qX4BIoZ4dRwEK
cJ/pu6XEGLtNb8tQk5YnPO1y2SmW7PYDntCRNy05CntIfjrc8s10ug1lWQr3ena/
pqz/JtscdGYizWmi1uzKuj+8EQ2eohHDHsQlOGSb/uE5jAiHyOfEF1FY6ngjtmgD
jtVhygSeKXhva+yi3Jz6eBNObSfUecyFtZf3VyCnzbPngqbJtZsrXrvEpUNcSLXI
kurRYMsTUVtEspntha6AiI29sTe6m29qFiaBz5rv2//At3Qhmg2Eab6OfQARAQAB
zQUxIDwxPsLBjQQTAQgAQQUCY+BgmAmQQIUfAYME4tQWIQSk8hibrEABX25oXG1A
hR8BgwTi1AIbAwIeAQIZAQMLCQcCFQgDFgACBScJAgcCAAAUsRAAonWud1GkdXdu
sa45o3JRez9s3mIKsX30RVigqCw5yhsqjW82iFl75hJVXfJehWSkW4YvHTckEJqp
C+vvcEEs6iySRd/1NDg7el0BP6bFemg4qA5CzS+fTGQCiG9mXjeC6mUm6Bf4vh5V
XwH9L0lbuHW5tnZ93AcHagFiy6mT3+3lMl3OdzP+F06WBDqRnrjhLA2P29nf7fte
AkBhtx7y4pvhPSSRCk/FBbnz+Av7UiS4Mzgw9zM4fCuForWjHtHDu+Z3V9pQUFXi
TlV4pYhB9ri2SPg7oO/F6Im8ZeSto14Q5c/jf5/hP/pBlL2oQP9T0qzXYnmDlgGm
cEcNwFfY/WhXqdfsH1MTsDC+5UpDHxf+NeI4rwmW9niLoWEYW4FysMjC5aBwZMc4
VQ/MNOkvFtKLGvVPFuQQ6uEE1zTPSfHI9NxYw3gmO/YAzGoSxikQplArOgAiHLH7
QAb6f8VdT9WNtDLTSSyplHtdc0I0CDaCWL6W5VjtOhUo1lD3vlUFmXpYP84/Ideg
htD0Y0GXQAB5Rc9tphuGQuFR2buR8Af4SAkAvo/Y4oZP8KW1wKp8hz8hp2taIk7I
DpaDK7W0s2HwC9RBwH3Cm1YRIKtS9WEr/mlngt9XzTX11xmWt3NEkjA3NBnKTdeL
JFG7d/B2+8cDvnLclA0JguaHwFIqDMHOwU0EY+BgmAEQALuCW41BJjCAYuBFy0p9
UbM2WO8KWvOBcyHR3ayPwe7EwZgXPbRuhPNe49nRc4q33fze1QzBbLKDJ//hjwiu
hxugNZTudMK2YXa988W7RycXt3MvKu7+qoPhBhoPxJmLjVLrsetLFCq3E5JMb0Iv
wf551uq9UhAPoYX0jz+6EIqVMizgUj3KyTVpav2qEc9LNLJyFl5p8qxU7N1gBnfO
o0AG0pxzYqwUt5uuXX84GdO6fRs5idqymday11VHQWQ7/PDSa7U1vSWFqodSzUth
EcoK23k3pczYTqn4rQQdsjurfTAFuedgWYo+eaWLqwj1x9oN6rrXMub8w+gaoXyY
L4+6vNkqSxv9MtINTtFyvRBJy/L9tTbcis7BBWoa06OVPCAm02TgYXh6YUSlkT22
1xraGrugOQU9Nl+ztGE+EPfIG6NsHt9fiJzACyy/HKY54yv/zI5nI7ieYZkFNuQR
+Py5jX1mXXUoYbmgbF7N/GAWFyfbVi17qmbhno9fCaJC80CFZkwP038QvYHpVC7I
9/PjD/KSRxTYRZMn0n5lV3NTOMcIe3N9PPH7K+HHWYWyj2uJD3taHOq10vvDvVTp
Hsu7t50Loc0oT3zamWm+Elm82q+owjQvjsrYTBGYKT3PcDGaji8N1aVEVGHWvxxL
A2nWlb3FaddzRZmGoYxY6FC9ABEBAAHCwXYEGAEIACoFAmPgYJgJkECFHwGDBOLU
FiEEpPIYm6xAAV9uaFxtQIUfAYME4tQCGwwAAKuwD/9AgJBrTOe3+IXOnemJZ45G
8sIfIzbGB+wiMIwtYr1aoufdtAlSUHPN1vwF2ujI4fIS9KNQeoTth0SkGFxii2Ie
tXvMwExeMGDRJz+Bk5TvExUrWvlr8xExsXtF6vrVcE8oj2CaW0X6mTBJCXuODKO7
nlWZO+JHVNB6JuZHAd2iusQI+GsH3DBFK+hgffnxx5TQ4TE3woyN1jGCJCMMXEfN
f1kZHDzzirfWqlL/c3MEMUHJ94CEHgrr+PoSOUDNc+nfLQryBmS61r13RK0REKZ3
ulM/SHkB+GA9HHZ92JVV0miZh4e9Cs2RAwPLGLjgCHZitWIx2aU1oCDY1ONreKr6
jxKkdTU81g2y32uv1VbXUgQwZlsja2Cpu7haoYpWF1Ea4/MeUS7+HmPLABLglhZ0
au7wcgEcyOnqnlnnO8LP/mlwtbdKcvICLVjazGoKIQ3XXDUMuaNTeFVtvxuunWrb
6qwnX3rAisPCUuYDoHZOpkLCopnAjESODL0R72aJ50akTNYcL2eGPUSnloyBd9/W
HzL8fVfqOvXXv3icROliytvqiU7QgVxJ1A+/i9u5+40klF9NB99g+0BjiZWSesYW
2WalV/k/it6Gx+WqTqV+MDM6H7AETO1/6cDBKoLlvOB+6OEm4JvsE7qUI0mixE1w
autelDSv67Jv+Wd4NKg5vw==
=Tcb5
-----END PGP PUBLIC KEY BLOCK-----`

	message, err := helper.EncryptMessageArmored(publicKey, "123123")
	if err != nil {
		t.Fatal(err)
	}

	secret, err := helper.DecryptMessageArmored(privateKey, []byte("1"), message)
	if err != nil {
		t.Fatal(err)
	}

	fmt.Println(secret)
}
